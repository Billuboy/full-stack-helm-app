# Default values for helm-chart.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

# DEPLOYMENT RELATED VALUES

# FRONTEND
feReplicaCount: 2

feContainer:
  image: billuboy/k8s_frontend:1
  name: k8s-client
  livenessProbe:
    httpGet:
      path: /
      port: 3000
    initialDelaySeconds: 1
    timeoutSeconds: 8
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /
      port: 3000
    initialDelaySeconds: 1
    periodSeconds: 10
    timeoutSeconds: 8
  resources:
    requests:
      cpu: '100m'
      memory: '256Mi'

feAutoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 4
  targetCPUPercentage: 70

feServices:
  nodePort:
    enabled: true
  cluserip:
    enabled: true

# BACKEND
beReplicaCount: 2

beContainer:
  image: billuboy/k8s_api_server:1
  name: k8s-api
  securityContext:
    runAsUser: 1002
  livenessProbe:
    httpGet:
      path: /health
      port: 8000
    initialDelaySeconds: 1
    timeoutSeconds: 8
    periodSeconds: 10
  readinessProbe:
    httpGet:
      path: /
      port: 8000
    initialDelaySeconds: 1
    periodSeconds: 10
    timeoutSeconds: 8
  resources:
    requests:
      cpu: '100m'
      memory: '256Mi'

beAutoscaling:
  enabled: true
  minReplicas: 2
  maxReplicas: 4
  targetCPUPercentage: 70

beNetpol:
  enabled: false
  resetNetwork: false

beServices:
  nodePort:
    enabled: true
  clusterip:
    enabled: true

# DATABASE
dbContainer:
  image: postgres:16-alpine
  name: k8s-postgres
  # securityContext:
  #   runAsUser: 70
  livenessProbe:
    tcpSocket:
      port: 5432
    initialDelaySeconds: 2
    periodSeconds: 10
  readinessProbe:
    tcpSocket:
      port: 5432
    initialDelaySeconds: 2
    periodSeconds: 10
  resources:
    requests:
      cpu: '100m'
      memory: '256Mi'

dbVolume:
  enabled: true
  name: db-data
  containerMountPath: /var/lib/postgresql/data
  storageClass: ''
  pv:
    name: db-pv
    storageCapacity: 600Mi
    hostPathMount: /data/k8s-pgdata
    reclaimPolicy: Retain
    accessModes:
      - ReadWriteMany
  pvc:
    name: db-pvc
    storageRequest: 100Mi

dbNetpol:
  enabled: false
  resetNetwork: false

dbServices:
  nodePort:
    enabled: true
  clusterip:
    enabled: true

image:
  repository: nginx
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ''

imagePullSecrets: []
nameOverride: ''
fullnameOverride: ''

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Automatically mount a ServiceAccount's API credentials?
  automount: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ''

podAnnotations: {}
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ''
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

# livenessProbe:
#   httpGet:
#     path: /
#     port: http
# readinessProbe:
#   httpGet:
#     path: /
#     port: http

# Additional volumes on the output Deployment definition.
volumes: []
# - name: foo
#   secret:
#     secretName: mysecret
#     optional: false

# Additional volumeMounts on the output Deployment definition.
volumeMounts: []
# - name: foo
#   mountPath: "/etc/foo"
#   readOnly: true

nodeSelector: {}

tolerations: []

affinity: {}
